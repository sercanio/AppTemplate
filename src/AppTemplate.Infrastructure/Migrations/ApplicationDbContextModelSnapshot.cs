// <auto-generated />
using System;
using AppTemplate.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AppTemplate.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppTemplate.Domain.AppUsers.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 553, DateTimeKind.Utc).AddTicks(2966),
                            IdentityId = "b3398ff2-1b43-4af7-812d-eb4347eecbb8"
                        });
                });

            modelBuilder.Entity("AppTemplate.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The action that triggered this notification");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb")
                        .HasComment("Additional JSON data associated with the notification");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("Detailed description of the notification");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The entity type related to this notification");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The ID of the related entity");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether the notification has been read");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("When the notification was created");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("The ID of the user who owns this notification");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("The username of the notification owner");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalData")
                        .HasDatabaseName("IX_Notifications_AdditionalData")
                        .HasFilter("\"DeletedOnUtc\" IS NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AdditionalData"), "gin");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_Notifications_Timestamp")
                        .HasFilter("\"DeletedOnUtc\" IS NULL");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Notifications_UserId")
                        .HasFilter("\"DeletedOnUtc\" IS NULL");

                    b.HasIndex("Entity", "EntityId")
                        .HasDatabaseName("IX_Notifications_Entity_EntityId")
                        .HasFilter("\"DeletedOnUtc\" IS NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Entity", "EntityId"), new[] { "UserId", "Timestamp" });

                    b.HasIndex("UserId", "IsRead")
                        .HasDatabaseName("IX_Notifications_UserId_IsRead")
                        .HasFilter("\"DeletedOnUtc\" IS NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId", "IsRead"), new[] { "Timestamp", "Details" });

                    b.HasIndex("UserId", "Timestamp")
                        .HasDatabaseName("IX_Notifications_Unread")
                        .HasFilter("\"IsRead\" = false AND \"DeletedOnUtc\" IS NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId", "Timestamp"), new[] { "Details", "Action" });

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("AppTemplate.Domain.Roles.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feature");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33261a4a-c423-4876-8f15-e40068aea5ca"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 592, DateTimeKind.Utc).AddTicks(9419),
                            Feature = "users",
                            Name = "users:read"
                        },
                        new
                        {
                            Id = new Guid("9f79a54c-0b54-4de5-94b9-8582a5f32e78"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2161),
                            Feature = "users",
                            Name = "users:create"
                        },
                        new
                        {
                            Id = new Guid("25bb194c-ea15-4339-9f45-5a895c51b626"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2170),
                            Feature = "users",
                            Name = "users:update"
                        },
                        new
                        {
                            Id = new Guid("559dd4ec-4d2e-479d-a0a9-5229ecc04fb4"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2172),
                            Feature = "users",
                            Name = "users:delete"
                        },
                        new
                        {
                            Id = new Guid("d066e4ee-6af2-4857-bd40-b9b058fa2201"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2175),
                            Feature = "roles",
                            Name = "roles:read"
                        },
                        new
                        {
                            Id = new Guid("940c88ad-24fe-4d86-a982-fa5ea224edba"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2179),
                            Feature = "roles",
                            Name = "roles:create"
                        },
                        new
                        {
                            Id = new Guid("346d3cc6-ac81-42b1-8539-cd53f42b6566"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2182),
                            Feature = "roles",
                            Name = "roles:update"
                        },
                        new
                        {
                            Id = new Guid("386e40e9-da38-4d2f-8d02-ac4cbaddf760"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2184),
                            Feature = "roles",
                            Name = "roles:delete"
                        },
                        new
                        {
                            Id = new Guid("0eeb5f27-10fd-430a-9257-a8457107141a"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2186),
                            Feature = "permissions",
                            Name = "permissions:read"
                        },
                        new
                        {
                            Id = new Guid("3050d953-5dcf-4eb0-a18d-a3ce62a0dd3c"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2188),
                            Feature = "auditlogs",
                            Name = "auditlogs:read"
                        },
                        new
                        {
                            Id = new Guid("a03a127b-9a03-46a0-b709-b6919f2598be"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2191),
                            Feature = "notifications",
                            Name = "notifications:read"
                        },
                        new
                        {
                            Id = new Guid("a5585e9e-ec65-431b-9bb9-9bbc1663ebb8"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2193),
                            Feature = "notifications",
                            Name = "notifications:update"
                        },
                        new
                        {
                            Id = new Guid("8f97aeb9-a9fd-470f-bae9-c9f5f0534d23"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 593, DateTimeKind.Utc).AddTicks(2195),
                            Feature = "statistics",
                            Name = "statistics:read"
                        });
                });

            modelBuilder.Entity("AppTemplate.Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 599, DateTimeKind.Utc).AddTicks(1141),
                            IsDefault = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("5dc6ec47-5b7c-4c2b-86cd-3a671834e56e"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 6, 21, 12, 41, 32, 599, DateTimeKind.Utc).AddTicks(2261),
                            IsDefault = true,
                            Name = "Registered"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b3398ff2-1b43-4af7-812d-eb4347eecbb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe973c9b-2f60-4ccc-8984-c640617ba9e2",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHxV2BVA02rzy9naT7MX6uJ/56BWWw/5TD5wmxu/gXU4a6KFXj9UJdWT4SJl81Dg+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f7a3705-708c-4598-824a-21c2a5486c9f",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Myrtus.Clarity.Core.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("33261a4a-c423-4876-8f15-e40068aea5ca")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("9f79a54c-0b54-4de5-94b9-8582a5f32e78")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("25bb194c-ea15-4339-9f45-5a895c51b626")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("559dd4ec-4d2e-479d-a0a9-5229ecc04fb4")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("d066e4ee-6af2-4857-bd40-b9b058fa2201")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("940c88ad-24fe-4d86-a982-fa5ea224edba")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("346d3cc6-ac81-42b1-8539-cd53f42b6566")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("386e40e9-da38-4d2f-8d02-ac4cbaddf760")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("0eeb5f27-10fd-430a-9257-a8457107141a")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("3050d953-5dcf-4eb0-a18d-a3ce62a0dd3c")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("a03a127b-9a03-46a0-b709-b6919f2598be")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("a5585e9e-ec65-431b-9bb9-9bbc1663ebb8")
                        },
                        new
                        {
                            RoleId = new Guid("5dc6ec47-5b7c-4c2b-86cd-3a671834e56e"),
                            PermissionId = new Guid("a03a127b-9a03-46a0-b709-b6919f2598be")
                        },
                        new
                        {
                            RoleId = new Guid("5dc6ec47-5b7c-4c2b-86cd-3a671834e56e"),
                            PermissionId = new Guid("a5585e9e-ec65-431b-9bb9-9bbc1663ebb8")
                        },
                        new
                        {
                            RoleId = new Guid("5dc6ec47-5b7c-4c2b-86cd-3a671834e56e"),
                            PermissionId = new Guid("33261a4a-c423-4876-8f15-e40068aea5ca")
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            UserId = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7")
                        },
                        new
                        {
                            RoleId = new Guid("5dc6ec47-5b7c-4c2b-86cd-3a671834e56e"),
                            UserId = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7")
                        });
                });

            modelBuilder.Entity("AppTemplate.Domain.AppUsers.AppUser", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("AppTemplate.Domain.AppUsers.AppUser", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AppTemplate.Domain.AppUsers.ValueObjects.NotificationPreference", "NotificationPreference", b1 =>
                        {
                            b1.Property<Guid>("AppUserId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsEmailNotificationEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("email_notification");

                            b1.Property<bool>("IsInAppNotificationEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("in_app_notification");

                            b1.Property<bool>("IsPushNotificationEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("push_notification");

                            b1.HasKey("AppUserId");

                            b1.ToTable("AppUsers");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");

                            b1.HasData(
                                new
                                {
                                    AppUserId = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7"),
                                    IsEmailNotificationEnabled = true,
                                    IsInAppNotificationEnabled = true,
                                    IsPushNotificationEnabled = true
                                });
                        });

                    b.Navigation("IdentityUser");

                    b.Navigation("NotificationPreference")
                        .IsRequired();
                });

            modelBuilder.Entity("AppTemplate.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("AppTemplate.Domain.AppUsers.AppUser", "AppUser")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("AppTemplate.Domain.Roles.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Permissions_PermissionId");

                    b.HasOne("AppTemplate.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Roles_RoleId");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("AppTemplate.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RoleUser_Roles_RoleId");

                    b.HasOne("AppTemplate.Domain.AppUsers.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RoleUser_AppUsers_UserId");
                });

            modelBuilder.Entity("AppTemplate.Domain.AppUsers.AppUser", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
